<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <data name="CannotCreateContainerConfiguringElement" xml:space="preserve">
    <value>An abstract ContainerConfiguringElement cannot be created. Please specify a concrete type.</value>
  </data>
  <data name="CannotCreateExtensionConfigurationElement" xml:space="preserve">
    <value>An abstract ExtensionConfigurationElement object cannot be created. Please specify a concrete type.</value>
  </data>
  <data name="CannotCreateInjectionMemberElement" xml:space="preserve">
    <value>An abstract InjectionMemberElement object cannot be created. Please specify a concrete type.</value>
  </data>
  <data name="CannotCreateParameterValueElement" xml:space="preserve">
    <value>An abstract ParameterValueElement object cannot be created. Please specify a concrete type.</value>
  </data>
  <data name="CouldNotResolveType" xml:space="preserve">
    <value>The type name or alias {0} could not be resolved. Please check your configuration file and verify this type name.</value>
  </data>
  <data name="DependencyForGenericParameterWithTypeSet" xml:space="preserve">
    <value>The dependency element for generic parameter {0} must not have an explicit type name but has '{1}'.</value>
  </data>
  <data name="DependencyForOptionalGenericParameterWithTypeSet" xml:space="preserve">
    <value>The optional dependency element for generic parameter {0} must not have an explicit type name but has '{1}'.</value>
  </data>
  <data name="DestinationNameFormat" xml:space="preserve">
    <value>{0} {1}</value>
  </data>
  <data name="DuplicateParameterValueElement" xml:space="preserve">
    <value>The injection configuration for {0} has multiple values.</value>
  </data>
  <data name="ElementTypeNotRegistered" xml:space="preserve">
    <value>The configuration element type {0} has not been registered with the section.</value>
  </data>
  <data name="ElementWithAttributesAndParameterValueElements" xml:space="preserve">
    <value>The injection configuration for {0} is specified through both attributes and child value elements.</value>
  </data>
  <data name="ExtensionTypeNotFound" xml:space="preserve">
    <value>Could not load section extension type {0}.</value>
  </data>
  <data name="ExtensionTypeNotValid" xml:space="preserve">
    <value>The extension type {0} does not derive from SectionExtension.</value>
  </data>
  <data name="InvalidExtensionElementType" xml:space="preserve">
    <value>The extension element type {0} that is being added does not derive from ContainerConfiguringElement, InjectionMemberElement, or ParameterValueElement. An extension element must derive from one of these types.</value>
  </data>
  <data name="InvalidValueAttributes" xml:space="preserve">
    <value>No valid attributes were found to construct the value for the {0}. Please check the configuration file.</value>
  </data>
  <data name="NoMatchingConstructor" xml:space="preserve">
    <value>Configuration is incorrect, the type {0} does not have a constructor that takes parameters named {1}.</value>
  </data>
  <data name="NoMatchingMethod" xml:space="preserve">
    <value>Configuration is incorrect, the type {0} does not have a method named {1} that takes parameters named {2}.</value>
  </data>
  <data name="NoSuchContainer" xml:space="preserve">
    <value>The container named "{0}" is not defined in this configuration section.</value>
  </data>
  <data name="NoSuchProperty" xml:space="preserve">
    <value>The type {0} does not have a property named {1}.</value>
  </data>
  <data name="NotAnArray" xml:space="preserve">
    <value>The configuration is set to inject an array, but the type {0} is not an array type.</value>
  </data>
  <data name="Parameter" xml:space="preserve">
    <value>parameter</value>
  </data>
  <data name="Property" xml:space="preserve">
    <value>property</value>
  </data>
  <data name="RequiredPropertyMissing" xml:space="preserve">
    <value>The attribute {0} must be present and non-empty.</value>
  </data>
  <data name="ValueNotAllowedForGenericArrayType" xml:space="preserve">
    <value>The value element for {1} was specified for the generic array type {0}. Value elements are not allowed for generic array types.</value>
  </data>
  <data name="ValueNotAllowedForGenericParameterType" xml:space="preserve">
    <value>The value element for {1} was specified for the generic parameter type {0}. Value elements are not allowed for generic parameter types.</value>
  </data>
  <data name="ValueNotAllowedForOpenGenericType" xml:space="preserve">
    <value>The value element for {1} was specified for the generic type {0}. Value elements are not allowed for generic types.</value>
  </data>
</root>